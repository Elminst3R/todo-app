{"version":3,"sources":["components/Todo.js","serviceWorker.js","index.js"],"names":["Task","task","index","completeTask","removeTask","className","style","textDecoration","completed","title","background","onClick","CreateTask","addTask","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","Todo","tasksRemaining","setTasksRemaining","tasks","setTasks","useEffect","filter","length","newTasks","splice","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAIA,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,sBACEC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,UAAY,eAAiB,IAF7D,UAIGP,EAAKQ,MAEN,wBAAQH,MAAO,CAAEI,WAAY,OAASC,QAAS,kBAAMP,EAAWF,IAAhE,eACA,wBAAQS,QAAS,kBAAMR,EAAaD,IAApC,yBAMN,SAASU,EAAT,GAAkC,IAAZC,EAAW,EAAXA,QAAW,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAS/B,OACE,sBAAMC,SAPa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,MAGT,SACE,uBACEI,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,YAAY,iBACZC,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,YAwE1BS,MAlEf,WAAiB,IAAD,EAC8BV,mBAAS,GADvC,mBACPW,EADO,KACSC,EADT,OAEYZ,mBAAS,CACjC,CACEL,MAAO,mBACPD,WAAW,GAEb,CACEC,MAAO,eACPD,WAAW,GAEb,CACEC,MAAO,kBACPD,WAAW,GAEb,CACEC,MAAO,QACPD,WAAW,GAEb,CACEC,MAAO,SACPD,WAAW,KArBD,mBAEPmB,EAFO,KAEAC,EAFA,KAyBdC,qBAAU,WAAQH,EAAkBC,EAAMG,QAAO,SAAA7B,GAAI,OAAKA,EAAKO,aAAWuB,WAG1E,IAKM5B,EAAe,SAAAD,GACnB,IAAM8B,EAAQ,YAAOL,GACrBK,EAAS9B,GAAOM,WAAY,EAC5BoB,EAASI,IAGL5B,EAAa,SAAAF,GACjB,IAAM8B,EAAQ,YAAOL,GACrBK,EAASC,OAAO/B,EAAO,GACvB0B,EAASI,IAGX,OACE,sBAAK3B,UAAU,iBAAf,UACE,sBAAKA,UAAU,SAAf,4BAAwCoB,EAAxC,OACA,qBAAKpB,UAAU,QAAf,SACGsB,EAAMO,KAAI,SAACjC,EAAMC,GAAP,OACT,cAACF,EAAD,CACEC,KAAMA,EACNC,MAAOA,EACPC,aAAcA,EACdC,WAAYA,GACPF,QAIX,qBAAKG,UAAU,cAAf,SACE,cAACO,EAAD,CAAYC,QAhCF,SAAAJ,GACd,IAAMuB,EAAQ,sBAAOL,GAAP,CAAc,CAAElB,QAAOD,WAAW,KAChDoB,EAASI,YC3DOG,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVJC,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a31018a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Todo.css';\r\n\r\n\r\nfunction Task({ task, index, completeTask, removeTask }) {\r\n  return (\r\n    <div\r\n      className=\"task\"\r\n      style={{ textDecoration: task.completed ? \"line-through\" : \"\" }}\r\n    >\r\n      {task.title}\r\n\r\n      <button style={{ background: \"red\" }} onClick={() => removeTask(index)}>x</button>\r\n      <button onClick={() => completeTask(index)}>Complete</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CreateTask({ addTask }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addTask(value);\r\n    setValue(\"\");\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        value={value}\r\n        placeholder=\"Add a new task\"\r\n        onChange={e => setValue(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction Todo() {\r\n  const [tasksRemaining, setTasksRemaining] = useState(0);\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      title: \"Grab some Coffee\",\r\n      completed: true\r\n    },\r\n    {\r\n      title: \"Grab some JS\",\r\n      completed: true\r\n    },\r\n    {\r\n      title: \"Grab some React\",\r\n      completed: false\r\n    },\r\n    {\r\n      title: \"Sleep\",\r\n      completed: false\r\n    },\r\n    {\r\n      title: \"Repeat\",\r\n      completed: false\r\n    }\r\n  ]);\r\n\r\n  useEffect(() => { setTasksRemaining(tasks.filter(task => !task.completed).length) });\r\n\r\n\r\n  const addTask = title => {\r\n    const newTasks = [...tasks, { title, completed: false }];\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  const completeTask = index => {\r\n    const newTasks = [...tasks];\r\n    newTasks[index].completed = true;\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  const removeTask = index => {\r\n    const newTasks = [...tasks];\r\n    newTasks.splice(index, 1);\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <div className=\"header\">Pending tasks ({tasksRemaining})</div>\r\n      <div className=\"tasks\">\r\n        {tasks.map((task, index) => (\r\n          <Task\r\n            task={task}\r\n            index={index}\r\n            completeTask={completeTask}\r\n            removeTask={removeTask}\r\n            key={index}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"create-task\" >\r\n        <CreateTask addTask={addTask} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './components/Todo';\nimport * as serviceWorker from './serviceWorker';\n// import reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}